WHITESPACE = _{ " " | "\t" }
identifier = @{ ( 'a'..'z' | 'A'..'Z' | "_" ) ~ ( 'a'..'z' | 'A'..'Z' | "_" | '0'..'9' )* }
constant = @{ ASCII_DIGIT+ }
constant_list = { constant+ }

// A circuit is a collection of statements
circuit = { SOI ~ statement* ~ EOI }

// Three types of statements: pub, alias, constraint
statement = { pub_statement | alias_statement | constraint_statement }

// pub statement declares public wires
pub_statement = { NEWLINE* ~ "pub" ~ wire_id_list ~ NEWLINE* }

// alias statement defines an alias
alias_name = { identifier }
alias_inputs = { wire_id_list }
alias_outputs = { wire_id_list }
alias_statement = { NEWLINE* ~ "def" ~ identifier ~ wire_id_list ~ ("->" ~ wire_id_list)? ~ "{" ~ constraint_statement* ~ "}" ~ NEWLINE* }

// Atomic and immutable data unit for the IR, a wire
wire_type = { "pub" | "priv" | "const" }
wire_id = _{ wire_type? ~ identifier }
wire_id_list = { wire_id+ } // e.g. x y -- no arithmetics allowed
// A wire is either referred to from a wire_id, or a gate_expression that
// returns exactly ONE output wire
wire = !{ identifier | "(" ~ gate_expression ~ ")" }

// Polynomial is a arithmetic expression involving wires as mathematical
// variables.
op = { "+" | "-" }
op_prec_2 = { "*" }
op_prec_3 = { "^" }
monomial = { (constant | wire) ~ (op_prec_3 ~ constant)? }
term = { monomial ~ (op_prec_2 ~ monomial)* }
poly = { term ~ (op ~ term)* }

// An expression returns a list of unnamed wires, and is eiter a poly
// expression or a gate expression, which must be enclosed in "()".
expression = { "(" ~ gate_expression ~ ")" | poly }

gate = { identifier ~ ("[" ~ constant_list ~ "]")? }
gate_expression = { identifier ~ wire_id+ }

// a constraint statement places some constraint on wires
// either a `=` constraint or a gate constraint
constraint_statement = { NEWLINE* ~ (expression ~ "=" ~ expression | gate_expression) ~ NEWLINE* }

